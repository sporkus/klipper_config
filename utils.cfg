[gcode_macro M204]
rename_existing: M99204
gcode:
    # Parameters
    {% set ACCEL = params.S|int %}
    SET_VELOCITY_LIMIT ACCEL={ACCEL} ACCEL_TO_DECEL={ACCEL}


[gcode_macro TOOLHEAD_CENTER]
gcode:
    {% set axis_max=printer.toolhead.axis_maximum[0:2] %}
    {% set axis_min=printer.toolhead.axis_minimum[0:2] %}
    {% set spd=printer.toolhead.max_velocity %}

    {% if "xyz" in printer.toolhead.homed_axes %}
    {% else %}
    G28
    {% endif %}
    G90
    G0 X{(axis_max[0] - axis_min[0])/2} Y{(axis_max[0] - axis_min[0])/2} Z50 F{spd*60}


[gcode_macro TOOLHEAD_FRONT]
gcode:
    {% if "xyz" in printer.toolhead.homed_axes %}
    {% else %}
    G28
    {% endif %}
    G90
    G0 Z15 F1800
    G0 X150 Y0 Z100 F30000
    SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0
    SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0



[gcode_macro set_chamber_led]
gcode:
    {% set value=params.VALUE|default(0.25)|float %}
    SET_PIN PIN=chamber_light VALUE={value}


[gcode_macro RESTART]
rename_existing: _RESTART
gcode:
    {% if printer.print_stats.state == "printing" %}
        PRINT_END
    {% endif %}
    M84
    _RESTART


[gcode_macro FIRMWARE_RESTART]
rename_existing: _FIRMWARE_RESTART
gcode:
    {% if printer.print_stats.state == "printing" %}
        PRINT_END
    {% endif %}
    M84
    _FIRMWARE_RESTART


[gcode_macro WARM_UP]
description: Warming up 
variable_bed_temp: 0 
variable_chamber_temp: 0
variable_hotend_temp: 0 
gcode:
    {% set bed_temp = params.BED|default(110)|int %}
    {% set hotend_temp = params.HOTEND|default(0)|int %}
    {% set chamber_temp = params.CHAMBER|default(0)|int %}

    SET_GCODE_VARIABLE MACRO=WARM_UP VARIABLE=bed_temp VALUE={bed_temp}
    SET_GCODE_VARIABLE MACRO=WARM_UP VARIABLE=hotend_temp VALUE={hotend_temp}
    SET_GCODE_VARIABLE MACRO=WARM_UP VARIABLE=chamber_temp VALUE={chamber_temp}

    SET_PIN PIN=chamber_light VALUE=0.00
    M118 {"Warming up... Bed={} Chamber={} Hotend={}".format(bed_temp, chamber_temp, hotend_temp)}

    M140 S{bed_temp}
    M104 S{hotend_temp}
    M106 S255

    {% if 'xyz' not in printer['toolhead'].homed_axes %}
      G28
    {% endif %}

    {% set th = printer['toolhead'] %}
    G90
    {% if th.position.z|float < 100 %}
      G0 Z100
    {% endif %}
    G0 X{th.axis_maximum.x / 2} Y{th.axis_maximum.y / 2}
    M84

    {% if (printer["temperature_sensor chamber"].temperature < chamber_temp
        or printer["heater_bed"].temperature < bed_temp 
        or printer["extruder"].temperature < hotend_temp ) %}
        UPDATE_DELAYED_GCODE ID=_WARMUP_LOOP DURATION=1
    {% endif %}


[delayed_gcode _WARMUP_LOOP]
gcode:
    {% set bed_target=printer['heater_bed'].target %}
    {% set hotend_target=printer['extruder'].target %}
    {% set chamber_temp=printer['gcode_macro warm_up'].chamber_temp %}

    set_nozzle_leds_off
    set_logo_leds_off
    G4 P1000
    STATUS_HEATING
    G4 P1000

    {% if (printer["temperature_sensor chamber"].temperature < chamber_temp
       or printer["heater_bed"].temperature < bed_target ) %}
        UPDATE_DELAYED_GCODE ID=_WARMUP_LOOP DURATION=1
    {% else %}
        SET_PIN PIN=chamber_light VALUE=0.50
    {% endif %}
	

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set printercfg  = printer.configfile.settings.printer %}
	{% set speed  = params.SPEED|default(printercfg.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printercfg.max_accel)|int %}
	# Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
	{% set bound = params.BOUND|default(20)|int %}
	# Size for small pattern box
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	# Large pattern
		# Max positions, inset by BOUND
		{% set x_min = printer.toolhead.axis_minimum.x + bound %}
		{% set x_max = printer.toolhead.axis_maximum.x - bound %}
		{% set y_min = printer.toolhead.axis_minimum.y + bound %}
		{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	# Small pattern at center
		# Find X/Y center point
		{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
		{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
		
		# Set small pattern box around center point
		{% set x_center_min = x_center - (smallpatternsize/2) %}
		{% set x_center_max = x_center + (smallpatternsize/2) %}
		{% set y_center_min = y_center - (smallpatternsize/2) %}
		{% set y_center_max = y_center + (smallpatternsize/2) %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Output parameters to g-code terminal
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }

	# Absolute positioning
	G90
	
	# Set new limits
	M118 SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel}
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{150*60}
		M400
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

	{% for i in range(iterations) %}
			M400
			M117 Iteration: {i+1}/{iterations}
		# Large pattern
			# Diagonals
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			
			# Box
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
		
		# Small pattern
			# Small diagonals 
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			
			# Small box
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home and get position again for comparison:
		G28
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{150*60}
		M400
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED


[gcode_macro TEST_SPEED_Z]
description: Checking if the existing z speed config will skip
variable_margin: 50 # test movement this far away from z boundaries
variable_iterations: 10 
gcode:
  {% set cfg = printer.configfile.config %}
  {% set th = printer.toolhead %}
  {% set max_v = cfg.printer.max_z_velocity|float %}
  {% set max_a = cfg.printer.max_z_accel|float %}
  {% set min_z = cfg.stepper_z.position_min|float %}
  {% set max_z = cfg.stepper_z.position_max|float %}
  {% set x_center = (th.axis_minimum.x|float + th.axis_maximum.x|float ) / 2 %}
  {% set y_center = (th.axis_minimum.y|float + th.axis_maximum.y|float ) / 2 %}
  {% set iter = params.ITERATIONS|default(iterations) %}

  SAVE_GCODE_STATE NAME=TEST_SPEED_Z
  M118 configured Z speed:{max_v} accel: {max_a}

  {% if not printer.quad_gantry_level.applied %}
    QUAD_GANTRY_LEVEL
  {% endif %}

  G90
  G28 Z
  M400
  GET_POSITION
  G0 X{x_center} Y{y_center} Z{min_z + margin} F600
  {% for i in range(iter) %}
    M400
    M117 Iteration {i+1}/{iter}
    G0 Z{max_z - margin} F{max_v * 60}
    G0 Z{min_z + margin} F{max_v * 60}
  {% endfor %}

  G28 Z
  M400
  GET_POSITION
  
	RESTORE_GCODE_STATE NAME=TEST_SPEED_Z

[endstop_phase]
[gcode_macro endstop_phase_check]
gcode:
  {% set th = printer.toolhead %}
  {% set axismin = th.axis_minimum %}
  {% set axismax = th.axis_maximum %}
  {% set x_center = (th.axis_minimum.x|float + th.axis_maximum.x|float ) / 2 %}
  {% set y_center = (th.axis_minimum.y|float + th.axis_maximum.y|float ) / 2 %}

  {% if not printer.quad_gantry_level.applied %}
    QUAD_GANTRY_LEVEL
  {% endif %}

  G90
  G28 
  ENDSTOP_PHASE_CALIBRATE

  G0 X{axismin[0]} Y{axismin[1]}
  G28 
  ENDSTOP_PHASE_CALIBRATE
  
  G0 X{axismin[0]} Y{axismax[1]}
  G28 
  ENDSTOP_PHASE_CALIBRATE

  G0 X{axismax[0]} Y{axismax[1]}
  G28 
  ENDSTOP_PHASE_CALIBRATE
  
  G0 X{axismax[0]} Y{axismin[1]}
  G28 
  ENDSTOP_PHASE_CALIBRATE

[gcode_macro m205]
gcode:

[gcode_macro FORCE_Z]
gcode:
  {% set distance=params.DISTANCE|default(10)|float %}
  {% set steps=(distance/5)|int %}

  {% for _ in range(steps) %}
    FORCE_MOVE stepper=stepper_z distance=5 velocity=15
    FORCE_MOVE stepper=stepper_z1 distance=5 velocity=15
    FORCE_MOVE stepper=stepper_z2 distance=5 velocity=15
    FORCE_MOVE stepper=stepper_z3 distance=5 velocity=15
  {% endfor %}
  
  