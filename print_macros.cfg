[gcode_macro PRINT_START]
gcode:
    # Parameters
    {% set th = printer['toolhead'] %}
    {% set temp_bed = params.BED|float %}
    {% set temp_cham = params.CHAMBER|default(0)|float %}
    {% set temp_hotend = params.HOTEND %}
    {% set print_min = params.PRINT_MIN|default("{},{}".format(*th.axis_minimum)) %}
    {% set print_max = params.PRINT_MAX|default("{},{}".format(*th.axis_maximum)) %}

    M117 waiting for bed and chamber temp 
    BED_MESH_CLEAR
    G90
    M140 S{temp_bed}
    M106 S255 ; part fan 100%
    {% if not printer.quad_gantry_level.applied %}
        QUAD_GANTRY_LEVEL
    {% endif %}
    G1 X150 Y50 Z100 
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={temp_cham-2}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={temp_bed-6}

    M117 Heating hotend to 190C for z calibration
    M104 S190
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM=190
    CLEAN_NOZZLE
    PRINT_AREA_MESH PRINT_MIN={print_min} PRINT_MAX={print_max}

    M117 Heating hotend to {temp_hotend}C
    M104 S{temp_hotend}
    G1 X150 Y50 Z100 
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp_hotend}
    FILAMENT_PURGE
    M400
    M117 Printing
    SET_CHAMBER_LED VALUE=1
    STATUS_PRINTING


[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 75, th.axis_maximum.z]|min %}
    M400
    G91
    M83
    G0 E-1 F2500
    G1 X+1 Y+1 Z+0.2 F20000          ; zhop 
    G90
    G0 X{th.axis_maximum.x/2} Y{th.axis_minimum.y + 1} Z{z_safe} F10000  ; park nozzle at rear
    M104 S220
    FILAMENT_RETRACT
    TURN_OFF_HEATERS
    M107                                     ; turn off fan
    BED_MESH_CLEAR
    STATUS_READY

[gcode_macro CALIBRATE_START]
description: a print start routine without remeshing
gcode:
    # Parameters
    {% set th = printer['toolhead'] %}
    {% set temp_bed = params.BED|float %}
    {% set temp_cham = params.CHAMBER|default(0)|float %}
    {% set temp_hotend = params.HOTEND %}
    {% set print_min = params.PRINT_MIN|default("{},{}".format(*th.axis_minimum)) %}
    {% set print_max = params.PRINT_MAX|default("{},{}".format(*th.axis_maximum)) %}

    M117 waiting for bed and chamber temp 
    G90
    M140 S{temp_bed}
    M106 S255 ; part fan 100%
    G28
    G0 X150 Y50 Z100 F3000
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={temp_cham-2}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={temp_bed-6}

    M117 Heating hotend to 190C for z calibration
    M104 S190
    {% if not printer.quad_gantry_level.applied %}
        QUAD_GANTRY_LEVEL
    {% endif %}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM=190
    CLEAN_NOZZLE
    {% if not printer.bed_mesh.profiles %}
        BED_MESH_CALIBRATE
    {% endif %}

    M117 Heating hotend to {temp_hotend}C
    M104 S{temp_hotend}
    G0 Z50
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp_hotend}
    FILAMENT_PURGE
    M400
    M117 Printing
    SET_CHAMBER_LED VALUE=1
    STATUS_PRINTING


[gcode_macro CALIBRATE_END]
description: a print end routine without turning off heaters completely
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 75, th.axis_maximum.z]|min %}
    M400
    G91
    M83
    G0 E-1 F2500
    G1 X+1 Y+1 Z+0.2 F20000          ; zhop 
    G90
    G0 X{th.axis_maximum.x/2} Y{th.axis_minimum.y + 1} Z{z_safe} F10000  ; park nozzle at rear
    M104 S220
    FILAMENT_RETRACT
    M104 S180  # reducing nozzle to 180C to reduce ooze
    STATUS_READY