# Print area bed mesh 

# When optional parameters PRINT_MIN or PRINT_MAX are provided,
# this will shrink the mesh area and use the first probe point as relative reference.
# Otherwise, it will run BED_MESH_CALIBRATE using config in [bed_mesh].
# Manually provided parameters will still override the calculated values.

# Requirement:
# Protoloft's klipper z calibration updated to this commit:
# https://github.com/protoloft/klipper_z_calibration/commit/b6db67c4768a62f20f5ce1c938e5aa1e5a0371f4

# inspired by 
# - ChipCE's script: https://gist.github.com/ChipCE/95fdbd3c2f3a064397f9610f915f7d02
# - jlas's script: https://github.com/jlas1/Klicky-Probe/blob/main/Klipper_macros/klicky-bed-mesh-calibrate.cfg

[gcode_macro PRINT_AREA_MESH]
description: Perform Mesh Bed Leveling around print area
# max probe count and max probe area are set in printer.cfg: [bed_mesh] 
variable_margin : 10             ; distance to expand the print area for probing
variable_grid_spacing : 20       ; distance between probe points
variable_min_probe_count : 4, 4  ; minimum probe count. 4 per axis is the minimum bicucbic interpolation requirement
variable_verbose: 1
gcode:
    {% set mesh_config = printer["configfile"].config["bed_mesh"] %}
    {% set toolhead = printer["toolhead"] %}
    {% set V = verbose %}
    {% set output = {
        "mesh_min" : [], 
        "mesh_max" : [],
        "probe_count": []
    } %}

    {% if V %}
        { action_respond_info("Print area mesh calibration") }
        { action_respond_info("Basic bed mesh config: {}".format(mesh_config | dictsort)) }
    {% endif %}

    # ------------ Area calculation ------------------
    {% set bound = {
        "config_min" : mesh_config.mesh_min,
        "config_max" : mesh_config.mesh_max,
        "print_min": params.PRINT_MIN|default("0, 0"),
        "print_max": params.PRINT_MAX|default("999, 999"),
    } %}

    # parse string
    {% for k,v in bound.items() %}
        {% set x, y = v.split(",") %}
        {% set _ = bound.update({k: (x|float, y|float)}) %}
    {% endfor %}

    {% for i in range(2) %}
        {% set min = (bound['config_min'][i] , bound['print_min'][i] - margin)|max %}
        {% set max = (bound['config_max'][i] , bound['print_max'][i] + margin)|min %}
        {% set _ = output['mesh_min'].append(min) %}
        {% set _ = output['mesh_max'].append(max) %}
    {% endfor %}

    # ------------ Probe count calculation ------------------
    {% set max_probe_count = mesh_config.probe_count.split(",") %}
    {% for i in range(2) %}
        {% set distance = output['mesh_max'][i] - output['mesh_min'][i] %}
        {% set count = (distance / grid_spacing) | int %}
        # put min, calculated, max in sorted list and use the center value
        {% set choices = [min_probe_count[i], count, max_probe_count[i]|int]|sort %}
        {% set _ = output['probe_count'].append(choices[1]) %}
    {% endfor %}

    # ----------- Formatting calculation as str ------------
    {% for k,v in output.items() %}
        {% set _ = output.update({k:'{},{}'.format(*v)}) %}
    {% endfor %}
    {% set _ = output.update({'relative_reference_index':0}) %}

    # ----------- manual override ------------
    {% for k,v in params.items() if "PRINT_" not in k %}
        {% set _ = output.update({k.lower():v}) %}
    {% endfor %}

    # ------------ gcode ------------------
    {% if not printer["quad_gantry_level"].applied %}
        m118 "need to level gantry before calibrating mesh..."
        quad_gantry_level
    {% endif %}

    {% if v %} 
        m118 calibrating z to the first probe_point ({output['mesh_min']})
    {% endif %}
    calibrate_z bed_position={output['mesh_min']}

    bed_mesh_calibrate {% for k,v in output | dictsort %} {"{}={}".format(k,v)} {% endfor %}