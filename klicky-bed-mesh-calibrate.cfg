# inspired by 
# - ChipCE's script: https://gist.github.com/ChipCE/95fdbd3c2f3a064397f9610f915f7d02
# - jlas's script: https://github.com/jlas1/Klicky-Probe/blob/main/Klipper_macros/klicky-bed-mesh-calibrate.cfg

[gcode_macro BED_MESH_CALIBRATE]
description: Perform Mesh Bed Leveling with klicky automount around print area
# Accepts PRINT_MIN=float,float, PRINT_MAX=float,float as optional parameters.
# Max probe count and max probe area are imported from [bed_mesh] config
rename_existing: _BED_MESH_CALIBRATE
variable_area_offset : 10        ; distance to expand the print area for probing
variable_grid_spacing : 20       ; distance between probe points
variable_min_probe_count : 4, 4  ; minimum probe count. 4 is the minimum bicucbic interpolation requirement
gcode:
    {% set mesh_config = printer["configfile"].config["bed_mesh"] %}
    {% set toolhead = printer["toolhead"] %}
    {% set V = printer["gcode_macro _User_Variables"].verbose %}
    {% set leveled = printer["quad_gantry_level"].applied %}

    {% if V %}
        { action_respond_info("Bed Mesh Calibrate") }
        { action_respond_info("Recived params: {}".format(params)) }
        {action_respond_info("Mesh config: {}".format(mesh_config))}
    {% endif %}

    # ------------ Area calculation ------------------
    {% set bound = {
        "config_min" : mesh_config.mesh_min,
        "config_max" : mesh_config.mesh_max,
        "print_min": params.PRINT_MIN|default("0, 0"),
        "print_max": params.PRINT_MAX|default("999, 999"),
    } %}

    # parse string
    {% for k,v in bound.items() %}
        {% set x, y = v.split(",") %}
        {% set _ = bound.update({k: (x|float, y|float)}) %}
    {% endfor %}

    {% set mesh_min= [] %}
    {% set mesh_max= [] %}
    {% for i in range(2) %}
        {% set min = (bound['config_min'][i] , bound['print_min'][i] - area_offset)|max %}
        {% set max = (bound['config_max'][i] , bound['print_max'][i] + area_offset)|min %}
        {% set _ = mesh_min.append(min) %}
        {% set _ = mesh_max.append(max) %}
    {% endfor %}

    # ------------ Probe count calculation ------------------
    {% set probe_count = [] %}
    {% set max_probe_count = mesh_config.probe_count.split(",") %}
    {% for i in range(2) %}
        {% set distance = mesh_max[i] - mesh_min[i] %}
        {% set count = (distance / grid_spacing) | int %}
        # Put min, calculated, max in sorted list and use the center value
        {% set choices = [min_probe_count[i], count, max_probe_count[i]|int]|sort %}
        {% set _ = probe_count.append(choices[1]) %}
    {% endfor %}

    {% set rri = ((probe_count[0] * probe_count[1] - 1) / 2)|int %}

    # ----------- Update params if not specified ------------
    {% if not params.get('PROBE_COUNT') %}
        {% set _ = params.update({'PROBE_COUNT':'{},{}'.format(*probe_count)}) %}
        {% set _ = params.update({'RELATIVE_REFERENCE_INDEX':rri}) %}
        {% if V %}
            { action_respond_info("Updated probe count: {}".format(probe_count)) }
            { action_respond_info("Updated relative reference index: {}".format(rri)) }
        {% endif %}
    {% endif %}

    {% if not params.get('MESH_MIN') %}
        {% set _ = params.update({'MESH_MIN':'{},{}'.format(*mesh_min)}) %}
        {% if V %}
            { action_respond_info("Updated mesh min: {}".format(mesh_min)) }
        {% endif %}
    {% endif %}

    {% if not params.get('MESH_MAX') %}
        {% set _ = params.update({'MESH_MAX':'{},{}'.format(*mesh_max)}) %}
        {% if V %}
            { action_respond_info("Updated mesh max: {}".format(mesh_max)) }
        {% endif %}
    {% endif %}

    # ----------- G-CODE ------------
    {% if not leveled %}
        M118 "Leveling gantry before mesh..."
        QUAD_GANTRY_LEVEL
    {% endif %}

    STATUS_MESHING
    _CheckProbe action=query
    G90
    Attach_Probe

    {% set paramstr = [] %}
    {% for p,v in params | dictsort %}
        {% set _ = paramstr.append('{}={}'.format(p, v)) %}
    {% endfor %}
    {% set paramstr = " ".join(paramstr) %}
    {% if V %}
        M118 BED_MESH_CALIBRATE {paramstr}
    {% endif %}
    _BED_MESH_CALIBRATE {paramstr}

    Dock_Probe
    STATUS_READY