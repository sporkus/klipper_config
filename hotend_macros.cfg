[gcode_macro clean_nozzle]
variable_clearance_z:         15	         ; When traveling, but not cleaning, the clearance along the z-axis between nozzle and brush.
variable_clearance_y:         270	         ; safe y position for travelling 
variable_wipe_qty:            5	             ; Number of complete (A complete wipe: left, right, left OR right, left, right) wipes.
variable_prep_spd:           650	         ; Travel (not cleaning) speed along x and y-axis in mm/s.
variable_wipe_spd:           650	         ; Nozzle wipe speed in mm/s.
# 
#                  ←   brush_width   →                            
#                   _________________                                                          ↑
#                  |                 |  ↑                     If you chose location_bucket_rear = True, Y position is acquired
#  brush_start (x) |                 | brush_depth            from your stepper_y position_max. Adjust your brush physically in
#                  |_________________|  ↓                               Y so that the nozzle scrubs within the brush.       
#                          (y)                                                                 ↓
#                      brush_front
# __________________________________________________________
#                     PRINTER FRONT
variable_brush_top:           1.5            ; brush top
variable_brush_front:     300
variable_brush_depth:     3 
variable_brush_start:     133
variable_brush_width:          50	

gcode:
    {% set brush_back = brush_front + brush_depth %}
    {% set prep_spd = prep_spd*60 %}
    {% set wipe_spd = wipe_spd*60 %}

    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

    SAVE_GCODE_STATE NAME=clean_nozzle
    STATUS_CLEANING
    G90
    G1 Z{brush_top + clearance_z} F{prep_spd}
    G1 Y{clearance_y} F{prep_spd}

    # Wipe
    G1 X{brush_start} F{prep_spd}
    G1 Y{brush_front} F{prep_spd}
    {% for wipes in range(1, (wipe_qty + 1)) %}
    	{% for pos_x in range(brush_start, brush_start + brush_width, 5) %}
	    {% set pos_y = brush_back if pos_x%2 else brush_front %}
            G1 X{pos_x} Y{pos_y} Z{brush_top} F{wipe_spd}
        {% endfor %}
    	{% for pos_x in range(brush_start + brush_width, brush_start, -5) %}
	    {% set pos_y = brush_back if pos_x%2 else brush_front %}
            G1 X{pos_x} Y{pos_y} Z{brush_top + 1} F{wipe_spd}
        {% endfor %}
    {% endfor %}
    
    ## Clear from area.
    M117 Cleaned!
    G1 Z{brush_top + clearance_z} F{prep_spd}
    G1 Y{clearance_y} F{prep_spd}
    
    ## Restore the gcode state to how it was before the macro.
    RESTORE_GCODE_STATE NAME=clean_nozzle
    STATUS_READY


[gcode_macro filament_retract]
variable_retract_len:           30              ; Retract length
variable_retract_spd:  50 ;mm/s
variable_min_temp:  210 
variable_max_temp:  250
gcode:
    {% set retract_spd = retract_spd * 60 %}

    {% if printer.extruder.target >= min_temp and printer.extruder.target <= max_temp %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={min_temp} MAXIMUM={max_temp}
        M83
        G92 E0
        M118 retracting {retract_len}mm at {retract_spd/60}mm/s
        G1 E-{retract_len} F{retract_spd}
        M104 S0
        M400
    {% else %}
        M118 Hotend needs to be between {min_temp}C and {max_temp}C for retraction. Skipping...
    {% endif %}


[gcode_macro filament_purge]
variable_purge_x:            115,195	     ; x coordinate(s) for purge, separated by comma. One will be chosen at random.
variable_purge_y:            303	  
variable_purge_z:              0	   
variable_safe_z:              15	   
variable_purge_len:            8	         ; Amount of filament, in mm, to purge.
variable_purge_spd:           3 	         ; Speed, in mm/s, of the purge.
variable_purge_temp_min:      220	         ; Minimum nozzle temperature to permit a purge. Otherwise, purge will not occur.
variable_travel_spd:          600 ; mm/s
gcode:
    {% set purge_x=purge_x | random() %}
    {% set travel_spd = travel_spd * 60 %}
    {% set purge_spd = purge_spd * 60 %}
    {% set retract_len = printer['gcode_macro filament_retract'].retract_len | float %}
    {% set purge_len = params.PURGE_LEN | default(purge_len|float + retract_len)  %}

    {% if printer.extruder.target >= purge_temp_min %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={purge_temp_min}
        {% if "xyz" not in printer.toolhead.homed_axes %}
            G28
        {% endif %}
        G90
        M83
        G92 E0
        G1 X{purge_x} F{travel_spd}
        G1 Y{purge_y} F{travel_spd}
        G1 Z{purge_z} F{travel_spd}
       
        M118 purging {purge_len}mm at {purge_spd/60}mm/s
        G1 E{purge_len} F{purge_spd}
        G92 E0   
        G0 Z{safe_z} F{travel_spd}
        M400
    {% else %}
        M118 Hotend needs to be between {min_temp}C and {max_temp}C for purging. Skipping...
    {% endif %}


[gcode_macro FILAMENT_LOAD]
variable_purge_amt: 50
variable_purge_temp: 230
gcode:
    M104 S{purge_temp}
    FILAMENT_PURGE PURGE_LEN={purge_amt}
    FILAMENT_RETRACT


[gcode_macro FILAMENT_EJECT]
gcode:
    STATUS_HEATING
    M109 S220
    M83 ;E relative 
    G90
    G1 E-50 F300
    M104 S230
    TOOLHEAD_FRONT


[gcode_macro FILAMENT_LOAD]
variable_purge_amt: 50
variable_purge_temp: 230
gcode:
    {% set purge_x = printer['gcode_macro clean_nozzle'].purge_x|random()|float %}
    {% set purge_y = printer['gcode_macro clean_nozzle'].purge_y|float %}
    {% set purge_z = printer['gcode_macro clean_nozzle'].purge_z|float %}

    {% if 'xyz' not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

    STATUS_HEATING
    M117 heating nozzle to {purge_temp}C for purging
    M118 heating nozzle to {purge_temp}C for purging
    M104 S{purge_temp}
    G90
    M83 
    G0 X{purge_x} Y{purge_y} Z50 F30000
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={purge_temp} 
    G0 Z{purge_z} F1800
    G92 E0 ;reset extruder
    G1 E{purge_amt} F300
    G92 E0 ;reset extruder
    WARM_RETRACT
    CLEAN_NOZZLE
    STATUS_READY